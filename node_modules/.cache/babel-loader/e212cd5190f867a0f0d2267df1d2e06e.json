{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport \"firebase/firestore\";\nimport { getAuth, signInWithPopup, GoogleAuthProvider, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, onAuthStateChanged } from \"firebase/auth\";\nimport { getFirestore, getDoc, setDoc, doc } from \"firebase/firestore\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAQxnYL7L85JPqsnoANrCi_MPC_OwK0oJg\",\n  authDomain: \"yanacachidb.firebaseapp.com\",\n  projectId: \"yanacachidb\",\n  storageBucket: \"yanacachidb.appspot.com\",\n  messagingSenderId: \"202197106451\",\n  appId: \"1:202197106451:web:ccf0db0ffad997264da4e6\",\n  measurementId: \"G-55QFQ39NPM\"\n}; //initialize app\n\nconst firebaseApp = initializeApp(firebaseConfig); //every time we call a provider we need an account\n\nconst provider = new GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider);\nexport const db = getFirestore();\nexport const createUserDocumentFromAuth = async function (userAuth) {\n  let additionalInformation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  //protecting code\n  if (!userAuth) return;\n  const userDocRef = doc(db, \"users\", userAuth.uid);\n  const userSnapShot = await getDoc(userDocRef);\n\n  if (!userSnapShot.exists()) {\n    //console.log(\"no existo\");\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalInformation\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n\n  return userDocRef;\n}; //this method is apart for allowing changes to the authentication without changing this\n\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await createUserWithEmailAndPassword(auth, email, password);\n};\nexport const signInAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await signInWithEmailAndPassword(auth, email, password);\n};\nexport const signOutUser = async () => signOut(auth);\nexport const onAuthStateChangedListener = callback => onAuthStateChanged(auth, callback); //create reservation \n\nexport const createReservation = async _ref => {\n  let {\n    enteredDate,\n    idService,\n    required,\n    keyId,\n    nameMessage\n  } = _ref;\n  console.log(keyId); // {keyId,enteredDate,idService, requiredService} = reservation;\n  //if(!reservation)return;\n\n  const reservationDocRef = doc(db, \"reservations\", keyId);\n  const resSnapShot = await getDoc(reservationDocRef);\n\n  if (!resSnapShot.exists()) {\n    //console.log(\"no existo\");\n    //const createdAt = new Date();\n    try {\n      await setDoc(reservationDocRef, {\n        keyId,\n        enteredDate,\n        idService,\n        required\n        /*,\r\n        ...additionalInformation*/\n\n      });\n    } catch (error) {\n      console.log(\"error creating reservation\", error.message);\n      alert(\"Error making\" + {\n        nameMessage\n      } + \"reservation\");\n    }\n  } else {\n    alert(\"This service is not available on this date\");\n    return;\n  }\n\n  alert(\"Reservation was succesfull\");\n  return reservationDocRef;\n};","map":{"version":3,"sources":["C:/Users/ariay/OneDrive/Documents/AppReact/Yanacachi-app/YanacachiApp/hotel-yanacachi/src/Firebase/Firebase.utils.js"],"names":["initializeApp","getAuth","signInWithPopup","GoogleAuthProvider","createUserWithEmailAndPassword","signInWithEmailAndPassword","signOut","onAuthStateChanged","getFirestore","getDoc","setDoc","doc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firebaseApp","provider","setCustomParameters","prompt","auth","signInWithGooglePopup","db","createUserDocumentFromAuth","userAuth","additionalInformation","userDocRef","uid","userSnapShot","exists","displayName","email","createdAt","Date","error","console","log","message","createAuthUserWithEmailAndPassword","password","signInAuthUserWithEmailAndPassword","signOutUser","onAuthStateChangedListener","callback","createReservation","enteredDate","idService","required","keyId","nameMessage","reservationDocRef","resSnapShot","alert"],"mappings":"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","sourcesContent":["import {initializeApp} from \"firebase/app\";\r\nimport \"firebase/firestore\";\r\nimport {\r\n    getAuth,\r\n    signInWithPopup,\r\n    GoogleAuthProvider,\r\n    createUserWithEmailAndPassword,\r\n    signInWithEmailAndPassword,\r\n    signOut,\r\n    onAuthStateChanged\r\n} from \"firebase/auth\";\r\nimport { getFirestore,\r\n    getDoc,\r\n    setDoc,\r\n    doc\r\n } from \"firebase/firestore\";\r\n\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyAQxnYL7L85JPqsnoANrCi_MPC_OwK0oJg\",\r\n    authDomain: \"yanacachidb.firebaseapp.com\",\r\n    projectId: \"yanacachidb\",\r\n    storageBucket: \"yanacachidb.appspot.com\",\r\n    messagingSenderId: \"202197106451\",\r\n    appId: \"1:202197106451:web:ccf0db0ffad997264da4e6\",\r\n    measurementId: \"G-55QFQ39NPM\"\r\n  }\r\n  //initialize app\r\n  const firebaseApp = initializeApp(firebaseConfig);\r\n  //every time we call a provider we need an account\r\n  const provider = new GoogleAuthProvider();\r\n  provider.setCustomParameters({ prompt: \"select_account\"});\r\n\r\n  export const auth = getAuth();\r\n  export const signInWithGooglePopup= () => signInWithPopup(auth,provider);\r\n\r\n\r\n  export const db = getFirestore();\r\n\r\n  export const createUserDocumentFromAuth = async(userAuth, additionalInformation = {}) => {\r\n    //protecting code\r\n    if(!userAuth)return;\r\n    const userDocRef = doc(db, \"users\",userAuth.uid);\r\n    const userSnapShot = await getDoc(userDocRef);\r\n\r\n    if(!userSnapShot.exists()){\r\n        //console.log(\"no existo\");\r\n        const {displayName, email} = userAuth;\r\n        const createdAt = new Date();\r\n        \r\n        try{\r\n            await setDoc(userDocRef, {\r\n              displayName,\r\n              email,\r\n              createdAt,\r\n              ...additionalInformation\r\n            });\r\n\r\n        }catch (error){\r\n            console.log(\"error creating user\", error.message);\r\n\r\n        }\r\n    }\r\n    return userDocRef;\r\n    \r\n};\r\n//this method is apart for allowing changes to the authentication without changing this\r\nexport const createAuthUserWithEmailAndPassword = async (email,password) =>{\r\n    if(!email || !password)return;\r\n\r\n    return await createUserWithEmailAndPassword(auth, email, password)\r\n\r\n};\r\n\r\nexport const signInAuthUserWithEmailAndPassword = async (email,password) =>{\r\n    if(!email || !password)return;\r\n\r\n    return await signInWithEmailAndPassword(auth, email, password)\r\n\r\n};\r\nexport const signOutUser = async () => signOut(auth);\r\nexport const onAuthStateChangedListener = (callback) => onAuthStateChanged(auth,callback);\r\n//create reservation \r\nexport const createReservation = async({enteredDate,idService, required,keyId, nameMessage}) => {\r\n     console.log(keyId);\r\n    // {keyId,enteredDate,idService, requiredService} = reservation;\r\n     //if(!reservation)return;\r\n    const reservationDocRef = doc(db, \"reservations\",keyId);\r\n    const resSnapShot = await getDoc(reservationDocRef);\r\n    \r\n    if(!resSnapShot.exists()){\r\n        //console.log(\"no existo\");\r\n        //const createdAt = new Date();\r\n        \r\n        try{\r\n            await setDoc(reservationDocRef, {\r\n                keyId,\r\n              enteredDate,\r\n              idService,\r\n              required\r\n              /*,\r\n              ...additionalInformation*/\r\n            });\r\n\r\n        }catch (error){\r\n            console.log(\"error creating reservation\", error.message);\r\n            alert(\"Error making\"+{nameMessage} +\"reservation\");\r\n\r\n        }\r\n    }\r\n    else\r\n    {\r\n        alert(\"This service is not available on this date\");\r\n        return;\r\n    }\r\n    alert(\"Reservation was succesfull\");\r\n    return reservationDocRef;\r\n    \r\n};\r\n\r\n  \r\n\r\n\r\n  "]},"metadata":{},"sourceType":"module"}