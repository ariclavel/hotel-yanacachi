{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport { getAuth, signInWithRedirect, signInWithPopup, GoogleAuthProvider, createUserWithEmailAndPassword } from \"firebase/auth\";\nimport { getFirestore, getDoc, setDoc, doc, Firestore } from \"firebase/firestore\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAQxnYL7L85JPqsnoANrCi_MPC_OwK0oJg\",\n  authDomain: \"yanacachidb.firebaseapp.com\",\n  projectId: \"yanacachidb\",\n  storageBucket: \"yanacachidb.appspot.com\",\n  messagingSenderId: \"202197106451\",\n  appId: \"1:202197106451:web:ccf0db0ffad997264da4e6\",\n  measurementId: \"G-55QFQ39NPM\"\n}; //initialize app\n\nconst firebaseApp = initializeApp(firebaseConfig); //every time we call a provider we need an account\n\nconst provider = new GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider);\nexport const db = getFirestore();\nexport const createUserDocumentFromAuth = async userAuth => {\n  const userDocRef = doc(db, \"users\", userAuth.uid);\n  const userSnapShot = await getDoc(userDocRef);\n\n  if (!userSnapShot.exists) {\n    console.log(\"no existo\");\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n\n  return userDocRef;\n}; //this method is apart for allowi\n\nexport const createAuthUserWithEmailAndPassword = async () => {};","map":{"version":3,"sources":["C:/Users/ariay/OneDrive/Documents/AppReact/Yanacachi-app/YanacachiApp/hotel-yanacachi/src/Firebase/Firebase.utils.js"],"names":["initializeApp","firebase","getAuth","signInWithRedirect","signInWithPopup","GoogleAuthProvider","createUserWithEmailAndPassword","getFirestore","getDoc","setDoc","doc","Firestore","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firebaseApp","provider","setCustomParameters","prompt","auth","signInWithGooglePopup","db","createUserDocumentFromAuth","userAuth","userDocRef","uid","userSnapShot","exists","console","log","displayName","email","createdAt","Date","error","message","createAuthUserWithEmailAndPassword"],"mappings":"AAAA,SAAQA,aAAR,QAA4B,cAA5B;AACA,OAAOC,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,SACIC,OADJ,EAEIC,kBAFJ,EAGIC,eAHJ,EAIIC,kBAJJ,EAKIC,8BALJ,QAMO,eANP;AAOA,SAASC,YAAT,EACIC,MADJ,EAEIC,MAFJ,EAGIC,GAHJ,EAIIC,SAJJ,QAKQ,oBALR;AAQA,MAAMC,cAAc,GAAG;AACnBC,EAAAA,MAAM,EAAE,yCADW;AAEnBC,EAAAA,UAAU,EAAE,6BAFO;AAGnBC,EAAAA,SAAS,EAAE,aAHQ;AAInBC,EAAAA,aAAa,EAAE,yBAJI;AAKnBC,EAAAA,iBAAiB,EAAE,cALA;AAMnBC,EAAAA,KAAK,EAAE,2CANY;AAOnBC,EAAAA,aAAa,EAAE;AAPI,CAAvB,C,CASE;;AACA,MAAMC,WAAW,GAAGpB,aAAa,CAACY,cAAD,CAAjC,C,CACA;;AACA,MAAMS,QAAQ,GAAG,IAAIhB,kBAAJ,EAAjB;AACAgB,QAAQ,CAACC,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B;AAEA,OAAO,MAAMC,IAAI,GAAGtB,OAAO,EAApB;AACP,OAAO,MAAMuB,qBAAqB,GAAE,MAAMrB,eAAe,CAACoB,IAAD,EAAMH,QAAN,CAAlD;AAGP,OAAO,MAAMK,EAAE,GAAGnB,YAAY,EAAvB;AAEP,OAAO,MAAMoB,0BAA0B,GAAG,MAAMC,QAAN,IAAmB;AAE3D,QAAMC,UAAU,GAAGnB,GAAG,CAACgB,EAAD,EAAK,OAAL,EAAaE,QAAQ,CAACE,GAAtB,CAAtB;AACA,QAAMC,YAAY,GAAG,MAAMvB,MAAM,CAACqB,UAAD,CAAjC;;AAEA,MAAG,CAACE,YAAY,CAACC,MAAjB,EAAwB;AACpBC,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,UAAM;AAACC,MAAAA,WAAD;AAAcC,MAAAA;AAAd,QAAuBR,QAA7B;AACA,UAAMS,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AAEA,QAAG;AACC,YAAM7B,MAAM,CAACoB,UAAD,EAAa;AACvBM,QAAAA,WADuB;AAEvBC,QAAAA,KAFuB;AAGvBC,QAAAA;AAHuB,OAAb,CAAZ;AAMH,KAPD,CAOC,OAAOE,KAAP,EAAa;AACVN,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCK,KAAK,CAACC,OAAzC;AAEH;AACJ;;AACD,SAAOX,UAAP;AAEH,CAxBQ,C,CAyBT;;AACA,OAAO,MAAMY,kCAAkC,GAAG,YAAW,CAE5D,CAFM","sourcesContent":["import {initializeApp} from \"firebase/app\";\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/firestore\";\r\nimport {\r\n    getAuth,\r\n    signInWithRedirect,\r\n    signInWithPopup,\r\n    GoogleAuthProvider,\r\n    createUserWithEmailAndPassword\r\n} from \"firebase/auth\";\r\nimport { getFirestore,\r\n    getDoc,\r\n    setDoc,\r\n    doc,\r\n    Firestore\r\n } from \"firebase/firestore\";\r\n\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyAQxnYL7L85JPqsnoANrCi_MPC_OwK0oJg\",\r\n    authDomain: \"yanacachidb.firebaseapp.com\",\r\n    projectId: \"yanacachidb\",\r\n    storageBucket: \"yanacachidb.appspot.com\",\r\n    messagingSenderId: \"202197106451\",\r\n    appId: \"1:202197106451:web:ccf0db0ffad997264da4e6\",\r\n    measurementId: \"G-55QFQ39NPM\"\r\n  }\r\n  //initialize app\r\n  const firebaseApp = initializeApp(firebaseConfig);\r\n  //every time we call a provider we need an account\r\n  const provider = new GoogleAuthProvider();\r\n  provider.setCustomParameters({ prompt: \"select_account\"});\r\n\r\n  export const auth = getAuth();\r\n  export const signInWithGooglePopup= () => signInWithPopup(auth,provider);\r\n\r\n\r\n  export const db = getFirestore();\r\n\r\n  export const createUserDocumentFromAuth = async(userAuth) => {\r\n\r\n    const userDocRef = doc(db, \"users\",userAuth.uid);\r\n    const userSnapShot = await getDoc(userDocRef);\r\n\r\n    if(!userSnapShot.exists){\r\n        console.log(\"no existo\");\r\n        const {displayName, email} = userAuth;\r\n        const createdAt = new Date();\r\n        \r\n        try{\r\n            await setDoc(userDocRef, {\r\n              displayName,\r\n              email,\r\n              createdAt\r\n            });\r\n\r\n        }catch (error){\r\n            console.log(\"error creating user\", error.message);\r\n\r\n        }\r\n    }\r\n    return userDocRef;\r\n    \r\n};\r\n//this method is apart for allowi\r\nexport const createAuthUserWithEmailAndPassword = async () =>{\r\n\r\n}\r\n \r\n\r\n  \r\n\r\n\r\n  "]},"metadata":{},"sourceType":"module"}